package com.example.ud_quizzi.view;

import com.example.ud_quizzi.controller.ExamController;
import com.example.ud_quizzi.model.Exam;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.stage.Stage;

import java.sql.Connection;

public class AddExamController {

    @FXML private TextField examNameField;
    @FXML private TextField createdByField;
    @FXML private TextField testTimeField;
    @FXML private Label messageLabel;

    private ExamController examController;
    private ManageExamController manageController;

    public void setConnection(Connection conn) {
        this.examController = new ExamController(conn);
    }

    public void setManageController(ManageExamController manageController) {
        this.manageController = manageController;
    }

    @FXML
    private void handleNext() {
        Stage currentStage = (Stage) examNameField.getScene().getWindow(); // l·∫•y Stage s·ªõm

        try {
            String name = examNameField.getText().trim();
            String createdBy = createdByField.getText().trim();
            String testTimeStr = testTimeField.getText().trim();

            if (name.isEmpty() || createdBy.isEmpty() || testTimeStr.isEmpty()) {
                messageLabel.setText("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin ƒë·ªÅ thi!");
                return;
            }

            int testTime;
            try {
                testTime = Integer.parseInt(testTimeStr);
            } catch (NumberFormatException e) {
                messageLabel.setText("Th·ªùi gian l√†m b√†i ph·∫£i l√† s·ªë nguy√™n!");
                return;
            }

            // T·∫°o Exam v√† l∆∞u v√†o DB
            Exam exam = new Exam(0, name, createdBy, new java.util.Date(), testTime);
            boolean examAdded = examController.addExam(exam);
            if (!examAdded) {
                messageLabel.setText("‚ùå L∆∞u ƒë·ªÅ thi th·∫•t b·∫°i!");
                return;
            }

            int newExamId = examController.getAllExams()
                    .stream()
                    .mapToInt(Exam::getExamID)
                    .max()
                    .orElse(0);

            if (newExamId == 0) {
                messageLabel.setText("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c ID ƒë·ªÅ thi m·ªõi!");
                return;
            }

            // üîπ M·ªü m√†n h√¨nh ch·ªçn c√¢u h·ªèi
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/example/ud_quizzi/view/SelectQuestionForExamScreen.fxml"));
            Parent root = loader.load();

            SelectQuestionForExamController controller = loader.getController();
            controller.setConnection(examController.getConnection());
            controller.setExamID(newExamId);

            Stage stage = new Stage();
            stage.setTitle("Ch·ªçn c√¢u h·ªèi cho ƒë·ªÅ thi: " + name);
            stage.setScene(new Scene(root));
            stage.show();

            // üîπ Refresh danh s√°ch trong ManageExamController
            if (manageController != null) {
                manageController.refreshTable();
            }

            // üîπ ƒê√≥ng m√†n h√¨nh hi·ªán t·∫°i **sau khi m·ªü m√†n h√¨nh m·ªõi**
            currentStage.close();

        } catch (Exception e) {
            e.printStackTrace();
            messageLabel.setText("‚ùå X·∫£y ra l·ªói khi chuy·ªÉn sang ch·ªçn c√¢u h·ªèi!");
        }
    }

    @FXML
    private void handleBack() {
        Stage stage = (Stage) examNameField.getScene().getWindow();
        stage.close();
    }
}
